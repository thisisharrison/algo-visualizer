{"version":3,"sources":["class/myNumber.js","actions/list_actions.js","reducers/list_reducer.js","actions/highlight_actions.js","reducers/highlight_reducer.js","actions/order_actions.js","reducers/order_reducer.js","actions/animation_actions.js","reducers/animation_reducer.js","reducers/visualizer_reducer.js","reducers/toolbar_reducer.js","reducers/root_reducer.js","actions/algorithms/bubble_sort.js","actions/algorithms/merge_sort.js","actions/algorithms/quick_sort.js","actions/algorithms/quick_sort_inplace.js","actions/algorithms/insertion.js","actions/algorithms/selection.js","reducers/selectors.js","util/util.js","components/toolbar/toolbar.js","components/toolbar/toolbar_container.js","components/list/list_item.js","components/list/list.js","components/list/list_container.js","components/app.js","components/root.js","index.js","store/store.js"],"names":["myNumber","id","val","this","RECEIVE_NUMBER","CLEAR_NUMBERS","RECEIVE_SORTED_NUMBERS","RESET_NUMBERS","receiveSortedNumbers","numbers","type","addNumber","number","dispatch","getState","idx","list","unsorted","length","receiveNumber","myNum","defaultArray","map","n","i","_listInitialState","sorted","listReducer","state","action","Object","freeze","assign","UPDATE_HIGHLIGHT","UPDATE_PERSIST","CLEAR_PERSIST","clearPersist","highlight","value","updateHighlight","Promise","resolve","setTimeout","SPEED","then","changeHighlight","updatePersist","changePersist","initialState","compare","swap","active","inactive","pivot","highlightReducer","persists","elements","RECEIVE_NEW_ORDER","receiveNewOrder","reorder","subarray","array","visualizer","order","slice","indexes","k","findIndex","el","push","minIndex","sort","a","b","without","filter","num","s","includes","insertBefore","num1","num2","undefined","left","right","idx1","idx2","orderReducer","RECEIVE_ANIMATION","START_ANIMATION","END_ANIMATION","receiveAnimation","animation","playAnimation","toDispatch","p","_","animationReducer","visualizerReducer","combineReducers","toolbarReducer","disabled","rootReducer","toolbar","bubbleSort","clone","actualBubbleSort","actualMergeSort","midIdx","Math","floor","sortLeft","sortRight","merge","a1","a2","merged","nextItem","shift","mergeSort","actualQuickSort","smaller","larger","forEach","sortSmaller","sortLarger","concat","quickSort","quicksort","start","finish","boundary","partition","lh","rh","quickSortInPlace","actualQuickSortInPlace","insertionSort","j","actualInsertion","selectionSort","min","actualSelection","highlightIds","highlightType","activeIds","values","inactiveIds","pivotId","getArray","Util","randomNumber","max","ceil","random","console","log","x","quickSort2","partition2","Toolbar","clearNumbers","resetNumbers","onClick","e","connect","ListItem","actualKlass","className","style","height","List","klass","ids","ownProps","App","Root","store","document","addEventListener","content","getElementById","createStore","composeWithDevTools","applyMiddleware","thunk","logger","ReactDOM","render","window"],"mappings":"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","file":"static/js/main.40cd5042.chunk.js","sourcesContent":["class myNumber {\n  constructor(id, val) {\n    this.id = id\n    this.val = val\n  }\n}\n\nexport default myNumber;","import myNum from \"../class/myNumber\";\n\nexport const RECEIVE_NUMBER = 'RECEIEVE_NUMBER';\nexport const CLEAR_NUMBERS = 'CLEAR_NUMBERS';\nexport const RECEIVE_SORTED_NUMBERS = 'RECEIVE_SORTED_NUMBERS';\nexport const RESET_NUMBERS = 'RESET_NUMBERS'\n\nexport const receiveNumber = (number) => ({\n    type: RECEIVE_NUMBER,\n    number\n})\n\nexport const clearNumbers = () => ({\n    type: CLEAR_NUMBERS\n})\n\nexport const receiveSortedNumbers = (numbers) => ({\n    type: RECEIVE_SORTED_NUMBERS,\n    numbers\n})\n\nexport const resetNumbers = () => ({\n    type: RESET_NUMBERS,\n})\n\nexport const addNumber = number => (dispatch, getState) => {\n    const idx = getState().list.unsorted.length;\n    dispatch(receiveNumber(new myNum(idx, number)));\n}","import {\n    RECEIVE_NUMBER,\n    CLEAR_NUMBERS,\n    RECEIVE_SORTED_NUMBERS,\n    RESET_NUMBERS\n} from '../actions/list_actions';\nimport myNum from '../class/myNumber';\n\nexport const defaultArray = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48].map((n, i) => new myNum (i, n));\n\nconst _listInitialState = {\n    unsorted: defaultArray,\n    sorted: []\n}\nconst listReducer = (state = _listInitialState, action) => {\n    Object.freeze(state);\n    switch(action.type){\n        case RECEIVE_NUMBER:\n            let unsorted = [...state.unsorted, action.number];\n            return Object.assign({}, state, { unsorted: unsorted });\n        case CLEAR_NUMBERS:\n            return _listInitialState;\n        case RECEIVE_SORTED_NUMBERS:\n            return Object.assign({}, state, { sorted: action.numbers })\n        case RESET_NUMBERS:\n            return _listInitialState;\n        default:\n            return state;\n    }\n}\n\nexport default listReducer;","import { SPEED } from '../index';\nexport const UPDATE_HIGHLIGHT = 'UPDATE_HIGHLIGHT';\nexport const UPDATE_PERSIST = 'UPDATE_PERSIST';\nexport const CLEAR_PERSIST = 'CLEAR_PERSIST';\n\n// highlight will dictate the className\n// main ones are compare, swap, sorted\nexport const changeHighlight = (highlight, value) => ({\n    type: UPDATE_HIGHLIGHT,\n    highlight,\n    value\n})\n\n// persist are highlights that persist in each renders \n// main ones are pivot for quick sort\nexport const changePersist = (highlight, value) => ({\n    type: UPDATE_PERSIST,\n    highlight,\n    value\n})\n\n// action creator to clear persist\nexport const clearPersist = (highlight, value) => ({\n    type: CLEAR_PERSIST,\n    highlight,\n    value\n})\n\nexport const updateHighlight = (highlight, value) => dispatch => (\n    new Promise(resolve => setTimeout(() => resolve(), SPEED))\n        .then(() => dispatch(changeHighlight(highlight, value)))\n)\n\nexport const updatePersist = (highlight, value) => dispatch => (\n    new Promise(resolve => setTimeout(() => resolve(), SPEED))\n        .then(() => dispatch(changePersist(highlight, value)))\n)","import { CLEAR_NUMBERS, RESET_NUMBERS } from '../actions/list_actions';\nimport { UPDATE_HIGHLIGHT, UPDATE_PERSIST, CLEAR_PERSIST } from '../actions/highlight_actions';\n\nconst initialState = {\n    compare: [],\n    swap: [],\n    sorted: [],\n    active: [],\n    inactive: [],\n    pivot: [],\n}\n\nconst highlightReducer = (state = initialState, action) => {\n    Object.freeze(state);\n    switch (action.type) {\n        case UPDATE_HIGHLIGHT:\n            const persists = {\n                active: state.active,\n                inactive: state.inactive,\n                pivot: state.pivot\n            }\n            return Object.assign({}, initialState,\n                { [action.highlight]: action.value },\n                persists\n                );\n        case UPDATE_PERSIST:\n            const elements = state[action.highlight];\n            return Object.assign({}, state, \n                { [action.highlight]: [...elements, ...action.value] }\n                )\n        case CLEAR_PERSIST:\n            return Object.assign({}, state, \n                { [action.highlight] : [] }\n                );\n        case CLEAR_NUMBERS:\n            return initialState;\n        case RESET_NUMBERS: \n            return initialState;\n        default:\n            return state;\n    }\n}\n\nexport default highlightReducer;","import { SPEED } from '../index';\n\nexport const RECEIVE_NEW_ORDER = 'RECEIVE_NEW_ORDER';\n\nexport const receiveNewOrder = numbers => ({\n    type: RECEIVE_NEW_ORDER,\n    numbers\n})\n\n// subarray => [2, 3] array => [1, 3, 2, 4, 5]\n// reorders by remove [3, 2] in array, and replacing with subarray\nexport const reorder = subarray => (dispatch, getState) => {\n    let numbers;\n    let array = getState().visualizer.order.slice();\n    let indexes = [];\n    for (let i = 0; i < subarray.length; i++) {\n        let k = array.findIndex(el => el.id === subarray[i].id);\n        indexes.push(k);\n    }\n    let minIndex = indexes.sort((a, b) => a - b)[0];\n    // Remove\n    let without = array.filter(num => !subarray.map(s => s.id).includes(num.id));\n    // Replace \n    numbers = [...without.slice(0, minIndex), ...subarray, ...without.slice(minIndex)]\n    \n    // For debugging\n    if (numbers.length !== array.length)\n    { debugger }\n    return new Promise(resolve => setTimeout(() => resolve(), SPEED))\n        .then(() => dispatch(receiveNewOrder(numbers)))\n}\n\n// Inserts num1 before num2\nexport const insertBefore = (num1, num2) => (dispatch, getState) => {\n    if (num1 === undefined || num2 === undefined) return;\n    let array = getState().visualizer.order.slice();\n    // Find index of num2\n    let idx = array.findIndex(el => el.id === num2.id);\n    // Split left and right. Right includes num2\n    // Filter left and right (no num1)\n    let left = array.slice(0, idx).filter(el => el.id !== num1.id);\n    let right = array.slice(idx).filter(el => el.id !== num1.id);\n    // [...left, num1, ...right]\n    let numbers = [...left, num1, ...right];\n    return new Promise(resolve => setTimeout(() => resolve(), SPEED))\n        .then(() => dispatch(receiveNewOrder(numbers)))\n}\n\nexport const swap = (idx1, idx2) => (dispatch, getState) => {\n    let array = getState().visualizer.order.slice();\n    [array[idx1], array[idx2]] = [array[idx2], array[idx1]]\n    new Promise(resolve => setTimeout(() => resolve(), SPEED))\n    .then(() => dispatch(receiveNewOrder(array)))\n}\n\n// [1, 2, 4, 5, 6, 7, 8, 9]\n// window.receiveSubarrayMerge = (subarray, array) => {\n//     let indexes = [];\n//     for (let i = 0; i < subarray.length; i++) {\n//         let k = array.findIndex(el => el == subarray[i]);\n//         indexes.push(k);\n//     }\n//     // Smallest index \n//     let minIndex = indexes.sort((a, b) => a - b)[0];\n//     return [...array.slice(0, minIndex), ...subarray, ...array.slice(indexes[indexes.length - 1] + 1)]\n// }\n// Find subarray smallest index \n// Delete subarray numbers from array\n// Insert subarray from smallest index\n// Concat the rest \n// window.insertMerge = (subarray, array) => {\n//     let indexes = [];\n//     for (let i = 0; i < subarray.length; i++) {\n//         let k = array.findIndex(el => el == subarray[i]);\n//         indexes.push(k);\n//     }\n//     // Smallest index \n//     let minIndex = indexes.sort((a, b) => a - b)[0];\n//     let without = array.filter(n => !subarray.includes(n));\n//     return [...without.slice(0, minIndex), ...subarray, ...without.slice(minIndex)]\n// }","import {\n    RECEIVE_NUMBER,\n    CLEAR_NUMBERS,\n    RECEIVE_SORTED_NUMBERS,\n    RESET_NUMBERS\n} from '../actions/list_actions';\nimport { RECEIVE_NEW_ORDER } from '../actions/order_actions';\nimport { defaultArray } from './list_reducer';\n\nconst orderReducer = (state = defaultArray, action) => {\n    Object.freeze(state);\n    switch (action.type) {\n        case RECEIVE_NUMBER:\n            return [...state, action.number];\n        case CLEAR_NUMBERS:\n            return [];\n        case RECEIVE_NEW_ORDER:\n            return action.numbers;\n        case RESET_NUMBERS:\n            return defaultArray;\n        default: \n            return state;\n    }\n}\n\nexport default orderReducer;","export const RECEIVE_ANIMATION = 'RECEIEVE_ANIMATION';\nexport const START_ANIMATION = 'START_ANIMATION';\nexport const END_ANIMATION = 'END_ANIMATION';\n\nexport const receiveAnimation = animation => ({\n    type: RECEIVE_ANIMATION,\n    animation\n})\n\nexport const startAnimation = () => ({\n    type: START_ANIMATION\n})\n\nexport const endAnimation = () => ({\n    type: END_ANIMATION,\n});\n\n// Plays all the animation recorded\n// each loop is a promise that calls next action creator in a promise\nexport const playAnimation = toDispatch => dispatch => {\n    dispatch(startAnimation());\n    for (let i = 0, p = Promise.resolve(); i < toDispatch.length; i++) {\n        p = p.then(_ => dispatch(toDispatch[i]))\n            .then(() => {\n                if (i === toDispatch.length - 1) dispatch(endAnimation());\n            })\n    }\n    \n}","import { RECEIVE_ANIMATION } from '../actions/animation_actions';\nimport { CLEAR_NUMBERS, RESET_NUMBERS } from '../actions/list_actions'; \n\nconst animationReducer = (state = [], action) => {\n    Object.freeze(state);\n    switch (action.type) {\n        case RECEIVE_ANIMATION:\n            return [...state, action.animation]\n        case CLEAR_NUMBERS: \n            return [];\n        case RESET_NUMBERS: \n            return [];\n        default: \n            return state;\n    }\n}\n\nexport default animationReducer;","import highlightReducer from './highlight_reducer';\nimport orderReducer from './order_reducer';\nimport animationReducer from './animation_reducer';\nimport { combineReducers } from 'redux';\n\nconst visualizerReducer = combineReducers({\n    highlight: highlightReducer,\n    order: orderReducer, \n    animation: animationReducer\n})\n\nexport default visualizerReducer;","import { START_ANIMATION, END_ANIMATION } from '../actions/animation_actions';\n\nexport const toolbarReducer = (state = {disabled : false}, action) => {\n    switch (action.type) {\n        case START_ANIMATION:\n            return Object.assign({}, { disabled: true });\n        case END_ANIMATION:\n            return Object.assign({}, { disabled: false });\n        default: \n            return state;\n    }\n}\n\nexport default toolbarReducer;","import listReducer from './list_reducer';\nimport visualizerReducer from './visualizer_reducer';\nimport toolbarReducer from './toolbar_reducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    list: listReducer,\n    visualizer: visualizerReducer,\n    toolbar: toolbarReducer\n})\n\nexport default rootReducer;","import {\n    updateHighlight\n} from '../highlight_actions';\nimport { reorder } from '../order_actions';\nimport { receiveAnimation } from '../animation_actions';\nimport { receiveSortedNumbers } from '../list_actions';\nimport { playAnimation } from '../animation_actions';\n\nexport const actualBubbleSort = array => dispatch => {\n    let unsorted = true;\n    let clone = Object.assign([], array);\n    let length = array.length;\n    while (unsorted) {\n        unsorted = false;\n        for (let i = 0; i < length - 1; i++) {\n            dispatch(receiveAnimation(\n                updateHighlight('compare', [clone[i], clone[i + 1]])\n            ));\n            switch (clone[i].val <= clone[i + 1].val) {\n                case true:\n                    dispatch(receiveAnimation(\n                        updateHighlight('sorted', [clone[i], clone[i + 1]])\n                    ));\n                    break;\n                case false:\n                    [clone[i], clone[i + 1]] = [clone[i + 1], clone[i]];\n                    dispatch(receiveAnimation(\n                        updateHighlight('swap', [clone[i], clone[i + 1]])\n                    ));\n                    dispatch(receiveAnimation(\n                        reorder([clone[i], clone[i + 1]])\n                    ));\n                    dispatch(receiveAnimation(\n                        updateHighlight('sorted', [clone[i], clone[i + 1]])\n                    ));\n                    unsorted = true;\n                    break;\n            }\n        }\n    }\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', clone)\n    ));\n    return clone;\n}\n\nexport const bubbleSort = array => (dispatch, getState) => {\n    new Promise (resolve => resolve(dispatch(actualBubbleSort(array))))\n    .then((numbers) => {\n        dispatch(receiveSortedNumbers(numbers));\n        let toDispatch = getState().visualizer.animation;\n        dispatch(playAnimation(toDispatch));\n    })\n}","import {\n    updateHighlight,\n    updatePersist,\n    clearPersist\n} from '../highlight_actions';\nimport { reorder, insertBefore } from '../order_actions';\nimport { receiveAnimation } from '../animation_actions';\nimport { receiveSortedNumbers } from '../list_actions';\nimport { playAnimation } from '../animation_actions';\n\n\nexport const actualMergeSort = array => dispatch => {\n    if (array.length < 2) return array;\n    let midIdx, length, left, right, sortLeft, sortRight;\n    length = array.length;\n    midIdx = Math.floor(length / 2);\n    left = array.slice(0, midIdx);\n    right = array.slice(midIdx);\n    \n    sortLeft = dispatch(actualMergeSort(left));\n\n    sortRight = dispatch(actualMergeSort(right));\n\n    return dispatch(merge(sortLeft, sortRight))\n}\n\nexport const merge = (a1, a2) => dispatch => {\n    let merged, nextItem;\n    merged = [];\n    while (a1.length > 0 && a2.length > 0) {\n        if (a1[0].val > a2[0].val) {\n            dispatch(receiveAnimation(\n                updateHighlight('compare', [a1[0], a2[0]])\n                ));\n            dispatch(receiveAnimation(\n                updateHighlight('swap', [a2[0], a1[0]])\n            ));\n            dispatch(receiveAnimation(insertBefore(a2[0], a1[0])));\n            nextItem = a2.shift();\n        } else {\n            dispatch(receiveAnimation(\n                updateHighlight('sorted', [a1[0]])\n            ));\n            nextItem = a1.shift();\n        }\n        merged.push(nextItem);\n    }\n    dispatch(receiveAnimation(\n        reorder([...merged, ...a1])\n    ));\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', [...a1])\n    ));\n    dispatch(receiveAnimation(\n        reorder([...merged, ...a1, ...a2])\n    ));\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', [...a2])\n    ));\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', [...merged, ...a1, ...a2])\n    ))\n\n    return [...merged, ...a1, ...a2];\n}\n\nexport const mergeSort = array => (dispatch, getState) => {\n    new Promise(resolve => resolve(dispatch(actualMergeSort(array))))\n        .then((numbers => {\n            dispatch(receiveSortedNumbers(numbers));\n            let toDispatch = getState().visualizer.animation;\n            dispatch(playAnimation(toDispatch));\n        }))\n}","import {\n    updateHighlight,\n    updatePersist,\n    clearPersist\n} from '../highlight_actions';\nimport { reorder, insertBefore } from '../order_actions';\nimport { receiveAnimation } from '../animation_actions';\nimport { receiveSortedNumbers } from '../list_actions';\nimport { playAnimation } from '../animation_actions';\n\nconst actualQuickSort = array => dispatch => {\n    if (array.length < 2) return array;\n    let pivot = array[0];\n    dispatch(receiveAnimation(\n        updatePersist('pivot', [pivot])\n    ));\n    let smaller = [];\n    let larger = [];\n    array.slice(1).forEach((num, i) => {\n        dispatch(receiveAnimation(\n            updateHighlight('compare', [pivot, num])\n        ));\n        if (num.val <= pivot.val) {\n            smaller.push(num);\n            dispatch(receiveAnimation(\n                updateHighlight('swap', [num])\n            ));\n            dispatch(receiveAnimation(\n                insertBefore(num, pivot)\n            ));\n            dispatch(receiveAnimation(\n                updateHighlight('sorted', [num])\n            ));\n        } else {\n            larger.push(num);\n            dispatch(receiveAnimation(\n                insertBefore(num, array.slice(1)[i + 1])\n            ));\n        }\n        dispatch(receiveAnimation(\n            updateHighlight('sorted', [num])\n        ));\n    })\n    dispatch(receiveAnimation(\n        clearPersist('pivot', [pivot])\n    ));\n    let sortSmaller = dispatch(actualQuickSort(smaller));\n    let sortLarger = dispatch(actualQuickSort(larger));\n    sortSmaller.push(pivot)\n    let sorted = sortSmaller.concat(sortLarger);\n\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', array)\n    ));\n    return sorted;\n}\n\nexport const quickSort = array => (dispatch, getState) => {\n    new Promise(resolve => resolve(dispatch(actualQuickSort(array))))\n        .then((numbers => {\n            dispatch(receiveSortedNumbers(numbers));\n            let toDispatch = getState().visualizer.animation;\n            dispatch(playAnimation(toDispatch));\n        }))\n\n}","import {\n    updateHighlight,\n    updatePersist,\n    clearPersist\n} from '../highlight_actions';\nimport { reorder, insertBefore } from '../order_actions';\nimport { receiveAnimation } from '../animation_actions';\nimport { receiveSortedNumbers } from '../list_actions';\nimport { playAnimation } from '../animation_actions';\n\nexport const actualQuickSortInPlace = array => dispatch => {\n    let clone = Object.assign([], array)\n    let result;\n    result = quicksort(clone, 0, clone.length - 1)(dispatch);\n    return result;\n}\n\nexport const quicksort = (array, start, finish) => dispatch => {\n    if (start >= finish) {\n        return;\n    }\n    const boundary = dispatch(partition(array, start, finish));\n    dispatch(quicksort(array, start, boundary - 1));\n    dispatch(quicksort(array, boundary + 1, finish));\n}\n\nexport const partition = (array, start, finish) => dispatch => {\n    let pivot = array[start];\n    // left marker index\n    let lh = start + 1;\n    // right marker index\n    let rh = finish;\n    \n    while (true) {\n        // find a value should be left of the pivot\n        // scan from left to right, stop if found smaller than pivot or l and r indexes collides\n        while (lh < rh && array[lh].val < pivot.val) lh++;\n        // find a value should be right of the pivot\n        // scan from right to left, stop if found bigger than or equal pivot or l and r indexes collides\n        while (lh < rh && array[rh].val >= pivot.val) rh--;\n        // if markers meet, break out of loop\n        if (lh === rh) break;\n        // swap lh and rh\n        [array[lh], array[rh]] = [array[rh], array[lh]];\n    }\n    if (array[lh].val >= pivot.val) return start;\n    array[start] = array[lh];\n    array[lh] = pivot;\n    return lh;\n}\n\nexport const quickSortInPlace = array => (dispatch, getState) => {\n    new Promise(resolve => resolve(dispatch(actualQuickSortInPlace(array))))\n        .then((numbers => {\n            dispatch(receiveSortedNumbers(numbers));\n            let toDispatch = getState().visualizer.animation;\n            dispatch(playAnimation(toDispatch));\n        }))\n}","import {\n    updateHighlight,\n    updatePersist,\n    clearPersist\n} from '../highlight_actions';\nimport { reorder, insertBefore, swap } from '../order_actions';\nimport { receiveAnimation } from '../animation_actions';\nimport { receiveSortedNumbers } from '../list_actions';\nimport { playAnimation } from '../animation_actions';\n\nconst actualInsertion = array => dispatch => {\n    let clone = Object.assign([], array);\n    for (let i = 1; i < clone.length; i++) {\n        let pivot = clone[i];\n        dispatch(receiveAnimation(\n            updatePersist('pivot', [clone[i]])\n        ));\n        let j = i;\n        while (j >= 1 && clone[j - 1].val > pivot.val) {\n            dispatch(receiveAnimation(\n                clearPersist('pivot', [pivot])\n            ));\n            dispatch(receiveAnimation(\n                updateHighlight('compare', [clone[j - 1], pivot])\n            ));\n            dispatch(receiveAnimation(\n                updatePersist('pivot', [pivot])\n            ));\n            clone[j] = clone[j - 1];\n            dispatch(receiveAnimation(\n                updateHighlight('swap', [clone[j], clone[j - 1]])\n            ));\n            dispatch(receiveAnimation(\n                swap(j - 1, j)\n            ));\n            dispatch(receiveAnimation(\n                clearPersist('pivot', [pivot])\n            ));\n            j--;\n        }\n        clone[j] = pivot;\n    }\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', clone)\n    ));\n    return clone;\n}\n\nexport const insertionSort = array => (dispatch, getState) => {\n    new Promise(resolve => resolve(dispatch(actualInsertion(array))))\n        .then((numbers) => {\n            dispatch(receiveSortedNumbers(numbers));\n            let toDispatch = getState().visualizer.animation;\n            dispatch(playAnimation(toDispatch));\n        })\n}","import {\n    updateHighlight,\n    updatePersist,\n    clearPersist\n} from '../highlight_actions';\nimport { swap } from '../order_actions';\nimport { receiveAnimation } from '../animation_actions';\nimport { receiveSortedNumbers } from '../list_actions';\nimport { playAnimation } from '../animation_actions';\n\nconst actualSelection = array => dispatch => {\n    let clone = Object.assign([], array);\n    let min;\n    for (let i = 0; i < clone.length - 1; i++) {\n        min = i;\n        dispatch(receiveAnimation(\n            updatePersist('pivot', [clone[min]])\n            ))\n        for (let k = i + 1; k < clone.length; k++) {\n            dispatch(receiveAnimation(\n                updateHighlight('compare', [clone[min], clone[k]])\n            ))\n            if (clone[k].val < clone[min].val) {\n                dispatch(receiveAnimation(\n                    updateHighlight('reset', [clone[min], clone[k]])\n                ))\n                dispatch(receiveAnimation(\n                    clearPersist('pivot', [clone[min]])\n                ))\n                min = k;\n                dispatch(receiveAnimation(\n                    updatePersist('pivot', [clone[min]])\n                ))\n            }\n            dispatch(receiveAnimation(\n                updateHighlight('reset', [clone[min], clone[k]])\n            ))            \n        }\n        if (min !== i) {\n            [clone[i], clone[min]] = [clone[min], clone[i]]\n            dispatch(receiveAnimation(\n                updateHighlight('swap', [clone[i], clone[min]])\n            ))\n            dispatch(receiveAnimation(\n                swap(i, min)\n            ))\n            dispatch(receiveAnimation(\n                updateHighlight('sorted', [clone[i], clone[min]])\n            ))\n        }\n        dispatch(receiveAnimation(\n            clearPersist('pivot', [clone[min]])\n        ))\n    }\n    dispatch(receiveAnimation(\n        updateHighlight('sorted', clone)\n    ))\n    return clone;\n}\n\nexport const selectionSort = array => (dispatch, getState) => {\n    new Promise(resolve => resolve(dispatch(actualSelection(array))))\n        .then((numbers) => {\n            dispatch(receiveSortedNumbers(numbers));\n            let toDispatch = getState().visualizer.animation;\n            dispatch(playAnimation(toDispatch));\n        })\n}","export const highlightIds = ({ highlight }) => {\n    let numbers = []\n    if (highlight.compare.length > 0) {\n        numbers = highlight['compare']\n    } else if (highlight.swap.length > 0) {\n        numbers = highlight['swap']\n    } else if (highlight.sorted.length > 0) {\n        numbers = highlight['sorted']\n    }\n    if (numbers.length === 0) {\n        return [];\n    } else {\n        return numbers.filter(n => !!n).map(j => j.id);\n    }\n}\n\nexport const highlightType = ({ highlight }) => {\n    if (highlight.compare.length > 0) {\n        return 'compare';\n    } else if (highlight.swap.length > 0) {\n        return 'swap';\n    } else if (highlight.sorted.length > 0) {\n        return 'sorted';\n    } else {\n        return '';\n    }\n}\n\nexport const activeIds = ({ active }) => {\n    return Object.values(active).filter(n => !!n).map(j => j.id);\n}\n\nexport const inactiveIds = ({ inactive }) => {\n    return Object.values(inactive).filter(n => !!n).map(j => j.id);\n}\n\nexport const pivotId = ({ pivot }) => {\n    return Object.values(pivot).filter(n => !!n).map(j => j.id);\n}\n\nexport const getArray = ({ order }) => {\n    if (order.length === 0) {\n        return [];\n    } else {\n        return order;\n    }\n}\n\nexport const getNumbers = ({ order }) => {\n    if (order.length === 0) {\n        return [];\n    } else {\n        return order.map(n => n.val);\n    }\n}","// Util\nconst Util = {\n    randomNumber(min = 1, max = 99) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min);\n    },\n    mergeSort(array) {\n        if (array.length < 2) return array;\n        let midIdx, length, left, right, sortLeft, sortRight;\n        length = array.length;\n        midIdx = Math.floor(length / 2);\n        left = array.slice(0, midIdx);\n        right = array.slice(midIdx);\n        sortLeft = Util.mergeSort(left);\n        sortRight = Util.mergeSort(right);\n        return Util.merge(sortLeft, sortRight);\n    },\n    merge(a1, a2) {\n        let merged, nextItem;\n        merged = [];\n        while (a1.length > 0 && a2.length > 0) {\n            console.log('Comparison: ', a1[0], a2[0]) // Working on Visualizer\n            nextItem = (a1[0] > a2[0]) ? a2.shift() : a1.shift();\n            console.log('Sort: ', a1[0], a2[0])\n            merged.push(nextItem);\n        }\n        let x = [...merged, ...a1, ...a2];\n        console.log('Sorted: ', x);\n        return x;\n    },\n    bubbleSort(array) {\n        let unsorted = true;\n        let clone = Object.assign([], array);\n        let length = array.length;\n        while (unsorted) {\n            unsorted = false;\n            for (let i = 0; i < length - 1; i++) {\n                console.log('Compares: ', [clone[i], clone[i + 1]])\n                console.log('Reset: ', [clone[i], clone[i + 1]])\n                switch (clone[i] <= clone[i + 1]) {\n                    case true:\n                        break;\n                    case false:\n                        [clone[i], clone[i + 1]] = [clone[i + 1], clone[i]];\n                        console.log('Sort: ', [clone[i], clone[i + 1]])\n                        console.log('Reset: ', [clone[i], clone[i + 1]]) // Working on Visualizer\n                        unsorted = true;\n                        break;\n                }\n            }\n        }\n        return clone;\n    },\n    quickSort(array) {\n        if (array.length < 2) return array;\n        let pivot = array[0];\n        console.log('Pivot: ',pivot);\n        let smaller = [];\n        let larger = [];\n        array.slice(1).forEach(num => {\n            if (num <= pivot) {\n                smaller.push(num);\n                console.log('Smaller: ', smaller)\n            } else {\n                larger.push(num);\n                console.log('Larger: ', larger)\n            }\n        })\n        let sortSmaller = Util.quickSort(smaller);\n        let sortLarger = Util.quickSort(larger);\n        console.log('Smaller Total', sortSmaller)\n        console.log('Larger Total', sortLarger)\n        sortSmaller.push(pivot)\n        console.log('Smaller Total + Pivot', sortSmaller)\n        return sortSmaller.concat(sortLarger);\n    }, \n    quickSort2(array, start = 0, finish = array.length - 1) {\n        if (start >= finish) return;\n        // partition will make swaps\n        let boundary = Util.partition2(array, start, finish);\n        // quick sort left\n        Util.quickSort2(array, start, boundary - 1);\n        // quick sort right\n        Util.quickSort2(array, boundary + 1, finish);\n        return array;\n    },\n    partition(array, start, finish) {\n        let pivot = array[start];\n        let lh = start + 1;\n        let rh = finish;\n        while (true) {\n            // Finds a value that should be to the left of the pivot\n            while (lh < rh && array[rh] >= pivot) rh --;\n            // Finds a value that should be to the right of pivot\n            while (lh < rh && array[lh] < pivot) lh ++;\n            // If pointers meet, break out of the loop\n            if (lh === rh) break;\n            // Swap\n            [array[lh], array[rh]] = [array[rh], array[lh]]\n        }\n        // Left hand number still greater than pivot\n        // pivot does not move\n        if (array[lh] >= pivot) return start;\n        // Otherwise swap left hand number with pivot\n        array[start] = array[lh];\n        array[lh] = pivot;\n        return lh;\n    },\n    partition2(array, start, finish) {\n        let pivot = array[finish];\n        let i = start - 1;\n        for (let j = start; j < finish; j++) {\n            if (array[j] < pivot) {\n                i += 1;\n                [array[i], array[j]] = [array[j], array[i]];\n            }\n        }\n        // Move pivot to i + 1\n        [array[i + 1], array[finish]] = [array[finish], array[i + 1]];\n        return i + 1;\n    }\n}\n\nexport default Util;","import React from 'react';\n\nconst Toolbar = ({ \n    disabled,\n    array, \n    receiveNumber,\n    clearNumbers,\n    resetNumbers,\n    quickSort,\n    mergeSort,\n    bubbleSort,\n    quickSortInPlace,\n    insertionSort,\n    selectionSort\n}) => {\n    return (\n      <div>\n        {/* <h1>Inside Toolbar</h1> */}\n        <button type=\"button\" onClick={receiveNumber} disabled={disabled}>\n          Add Number\n        </button>\n        <button\n          type=\"button\"\n          onClick={(e) => quickSort(array)}\n          disabled={disabled}\n        >\n          Quicksort naive\n        </button>\n        {/* <button type=\"button\"\n                onClick={(e) => quickSortInPlace(array)}\n                disabled={disabled}\n                >\n                Quicksort in-place\n            </button> */}\n        <button\n          type=\"button\"\n          onClick={(e) => mergeSort(array)}\n          disabled={disabled}\n        >\n          Merge Sort\n        </button>\n        <button\n          type=\"button\"\n          onClick={(e) => selectionSort(array)}\n          disabled={disabled}\n        >\n          Selection\n        </button>\n        <button\n          type=\"button\"\n          onClick={(e) => insertionSort(array)}\n          disabled={disabled}\n        >\n          Insertion\n        </button>\n        <button\n          type=\"button\"\n          onClick={(e) => bubbleSort(array)}\n          disabled={disabled}\n        >\n          Bubble Sort\n        </button>\n        <button type=\"button\" onClick={resetNumbers} disabled={disabled}>\n          Reset\n        </button>\n        <button type=\"button\" onClick={clearNumbers} disabled={disabled}>\n          Clear\n        </button>\n      </div>\n    );\n}\n\nexport default Toolbar;","import { connect } from 'react-redux';\nimport { bubbleSort } from '../../actions/algorithms/bubble_sort';\nimport { mergeSort } from '../../actions/algorithms/merge_sort';\nimport { quickSort } from '../../actions/algorithms/quick_sort';\nimport { quickSortInPlace } from '../../actions/algorithms/quick_sort_inplace';\nimport { insertionSort } from '../../actions/algorithms/insertion';\nimport { selectionSort } from '../../actions/algorithms/selection';\nimport { addNumber, clearNumbers, resetNumbers } from '../../actions/list_actions';\nimport { getArray } from '../../reducers/selectors';\nimport Util from '../../util/util';\nimport Toolbar from './toolbar';\n\nconst mapStateToProps = ({visualizer, toolbar}) => ({\n    array: getArray(visualizer),\n    disabled: toolbar.disabled\n})\n\nconst mapDispatchToProps = dispatch => ({\n    receiveNumber: () => dispatch(addNumber(Util.randomNumber())),\n    clearNumbers: () => dispatch(clearNumbers()),\n    resetNumbers: () => dispatch(resetNumbers()),\n    quickSort: (array) => dispatch(quickSort(array)),\n    mergeSort: (array) => dispatch(mergeSort(array)),\n    bubbleSort: (array) => dispatch(bubbleSort(array)),\n    quickSortInPlace : (array) => dispatch(quickSortInPlace(array)),\n    insertionSort : (array) => dispatch(insertionSort(array)),\n    selectionSort : (array) => dispatch(selectionSort(array))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","import React from 'react';\n\nconst ListItem = ({ number, actualKlass }) => (\n    <div>\n        <span className=\"number\">\n            <li className={`bar ${actualKlass}`} \n                style={{ height: `${number * 5}px` }}>\n                <span className=\"text\">\n                    {number}\n                </span>\n            </li>\n        </span>\n    </div>\n)\n\nexport default ListItem;","import React from 'react';\nimport ListItem from './list_item';\n\nconst List = ({ numbers, klass, ids, activeIds, inactiveIds, pivotId }) => {\n    const list = numbers.map((number, idx) => {\n        let actualKlass = activeIds.includes(number.id) ? 'active' : '';\n        actualKlass = inactiveIds.includes(number.id) ? 'inactive' : actualKlass;\n        actualKlass = ids.includes(number.id) ? klass : actualKlass;\n        actualKlass = pivotId.includes(number.id) ? 'pivot' : actualKlass;\n        return (<ListItem number={number.val} key={idx} actualKlass={actualKlass}/>)\n    })\n\n    return (\n        <div>\n            {/* <h1>Inside List</h1> */}\n            <ul className=\"list\">\n                {list}\n            </ul>\n        </div>\n    )\n}\nexport default List;","import { connect } from 'react-redux';\nimport { getArray, highlightIds, highlightType, activeIds, inactiveIds, pivotId } from '../../reducers/selectors';\nimport List from './list';\n\nconst mapStateToProps = ({visualizer}, ownProps) => ({\n    numbers: getArray(visualizer),\n    klass: highlightType(visualizer),\n    ids: highlightIds(visualizer), \n    activeIds: activeIds(visualizer.highlight),\n    inactiveIds: inactiveIds(visualizer.highlight),\n    pivotId: pivotId(visualizer.highlight)\n});\nexport default connect(mapStateToProps, null)(List);","import React from 'react';\nimport ToolbarContainer from './toolbar/toolbar_container';\nimport ListContainer from './list/list_container';\n\nconst App = () => (\n  <div>\n      <h1>Sorting Algorithms</h1>\n      {/* <h1>Inside App</h1> */}\n      <ToolbarContainer />\n      <ListContainer />\n  </div>\n);\n\nexport default App;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './app';\n\nconst Root = ({ store }) => (\n    <div>\n        {/* <h1>Inside Provider</h1> */}\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </div>\n)\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { configureStore } from './store/store';\nimport Root from './components/root';\nimport './index.css'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const content = document.getElementById('content');\n    const store = configureStore();\n    ReactDOM.render(<Root store={store} />, content);\n\n    // TESTING\n    window.store = store;\n    window.getState = store.getState;\n});\n\nexport const SPEED = 100;","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/root_reducer';\n\nexport const configureStore = () => {\n    const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, logger)));\n    return store;\n}\n"],"sourceRoot":""}